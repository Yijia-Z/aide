generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
 
}

/// ///////////////////////////////////////////////////
/// ///////////////////////////////////////////////////
model UserProfile {
  id             String             @id
  email          String?            @unique
  username       String?
  createdAt      DateTime           @default(now())
  updatedAt      DateTime           @updatedAt
  balance        Decimal            @default(0)

  availableTools AvailableTool[]    @relation("UserAvailableTools")
  messages       Message[]
  models         Model[]
  memberships    ThreadMembership[]
  createdTools   Tool[]             @relation("UserCreatedTools")
  usageRecords   UsageRecord[]
  createdThreads Thread[]
}

model ThreadInvite {
  id          String     @id @default(uuid())
  threadId    String
  inviteEmail String
  role        ThreadRole
  invitedBy   String?
  createdAt   DateTime   @default(now())
  acceptedAt  DateTime?
  thread      Thread     @relation(fields: [threadId], references: [id], onDelete: Cascade)

  @@index([threadId])
}

model UsageRecord {
  generationId     String      @id
  userId           String
  totalCost        Float?
  promptTokens     Int?
  completionTokens Int?
  totalTokens      Int?
  createdAt        DateTime    @default(now())
  userProfile      UserProfile @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

/// ///////////////////////////////////////////////////
/// ///////////////////////////////////////////////////
model Thread {
  id          String             @id
  title       String
  updatedAt   DateTime           @default(now())
  createdAt   DateTime           @default(now())
  isDeleted   Boolean            @default(false)
    creatorId   String
  creator     UserProfile        @relation(fields: [creatorId], references: [id], onDelete: Cascade)

  messages    Message[]
  blacklist   ThreadBlacklist[]
  invites     ThreadInvite[]
  memberships ThreadMembership[]

  @@index([creatorId])
}

/// ///////////////////////////////////////////////////
/// ///////////////////////////////////////////////////
model ThreadMembership {
  userId      String
  threadId    String
  role        ThreadRole             @default(VIEWER)
  status      ThreadMembershipStatus @default(INVITED)
  joinedAt    DateTime               @default(now())
  pinned      Boolean                @default(false)
  thread      Thread                 @relation(fields: [threadId], references: [id], onDelete: Cascade)
  userProfile UserProfile            @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, threadId])
}

model ThreadBlacklist {
  id           String   @id @default(uuid())
  threadId     String
  bannedUserId String?
  bannedEmail  String?
  reason       String?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @default(now()) @updatedAt
  thread       Thread   @relation(fields: [threadId], references: [id], onDelete: Cascade)

  @@index([threadId])
}

/// ///////////////////////////////////////////////////
/// ///////////////////////////////////////////////////
model Message {
  id          String       @id
  threadId    String
  parentId    String?
  publisher   String
  userId      String?
  ownerId     String?
  content     Json?        @default("[]")
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @default(now()) @updatedAt
  modelConfig Json?

   isDeleted   Boolean      @default(false)
  deletedAt   DateTime?
  // 新增：被谁锁定、何时锁定
  editingBy    String?
  editingAt    DateTime?

  thread      Thread       @relation(fields: [threadId], references: [id], onDelete: Cascade)
  userProfile UserProfile? @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([threadId])
  @@index([parentId])
  @@index([userId])
}

/// ///////////////////////////////////////////////////
/// ///////////////////////////////////////////////////
model Model {
  id           String      @id
  name         String
  baseModel    String
  systemPrompt String
  parameters   Json
  createdBy    String
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @default(now())
  isDeleted    Boolean     @default(false)
  deletedAt    DateTime?
  userProfile  UserProfile @relation(fields: [createdBy], references: [id], onDelete: Cascade)
  modelTools   ModelTool[] @relation("ModelToolsRelation")
  tools        Tool[]      @relation("ModelToolsRelation")

  @@index([createdBy])
}

/// ///////////////////////////////////////////////////
/// ///////////////////////////////////////////////////
model Tool {
  id             String          @id
  name           String
  description    String
  type           String?
  function       Json?
  createdBy      String?
  isDeleted      Boolean         @default(false)
  deletedAt      DateTime?
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @default(now())
  availableTools AvailableTool[] @relation("UserAvailableToolsForTool")
  modelTools     ModelTool[]     @relation("ModelToolsRelation")
  userProfile    UserProfile?    @relation("UserCreatedTools", fields: [createdBy], references: [id], onDelete: Cascade)
  models         Model[]         @relation("ModelToolsRelation")

  @@index([createdBy])
  @@index([name])
}

/// ///////////////////////////////////////////////////
/// ///////////////////////////////////////////////////
model ModelTool {
  modelId String
  toolId  String
  model   Model  @relation("ModelToolsRelation", fields: [modelId], references: [id], onDelete: Cascade)
  tool    Tool   @relation("ModelToolsRelation", fields: [toolId], references: [id], onDelete: Cascade)

  @@id([modelId, toolId])
}

/// ///////////////////////////////////////////////////
/// ///////////////////////////////////////////////////
model AvailableTool {
  userId String
  toolId String
  tool   Tool        @relation("UserAvailableToolsForTool", fields: [toolId], references: [id], onDelete: Cascade)
  user   UserProfile @relation("UserAvailableTools", fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, toolId])
}

enum ThreadRole {
  VIEWER
  PUBLISHER
  EDITOR
  OWNER
}

enum ThreadMembershipStatus {
  INVITED
  ACCEPTED
  DECLINED
  REMOVED
}
